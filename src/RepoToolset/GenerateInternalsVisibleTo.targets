<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project>
  <PropertyGroup>
    <GeneratedInternalsVisibleToFile>$(IntermediateOutputPath)$(MSBuildProjectName).InternalsVisibleTo$(DefaultLanguageSourceExtension)</GeneratedInternalsVisibleToFile>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <InternalsVisibleTo>
      <Visible>false</Visible>
    </InternalsVisibleTo>
  </ItemDefinitionGroup>

  <PropertyGroup Condition="'$(PublicKey)' != '' and '$(SignAssembly)' == 'True'">
    <InternalsVisibleToSuffix>, PublicKey=$(PublicKey)</InternalsVisibleToSuffix>
  </PropertyGroup>

  <!-- Dependency on PrepareForBuild is necessary so that we don't accidentally get ordered before it.
  We rely on PrepareForBuild to create the IntermediateOutputDirectory if it doesn't exist. -->
  <Target Name="GenerateInternalsVisibleToFile"
          Inputs="$(MSBuildThisFileFullPath);$(MSBuildProjectFile)"
          Outputs="$(GeneratedInternalsVisibleToFile)"
          DependsOnTargets="PrepareForBuild"
          Condition="'@(InternalsVisibleTo)' != ''"
          BeforeTargets="CoreCompile">

    <!--
         This is a slightly evil trick. What we have is a group of InternalsVisibleTo items which
         we need to convert to the items that the WriteCodeFragment expects. They look like this:

         <InternalsVisibleTo Include="Foo" />

         And need to convert it to:

         <InternalsVisibleToAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
           <_Parameter1>Foo</Parameter1>
         </InternalsVisibleToAttribute>

         One way (although a bit evil) is to use the old CreateItem task. Since we use the well-defined
         "Identity" metadata on each of our itemgroups, MSBuild batching will take effect and this task
         will be invoked once for each InternalsVisibleTo item.
    -->
    <CreateItem Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute"
                AdditionalMetadata="_Parameter1=%(InternalsVisibleTo.Identity)$(InternalsVisibleToSuffix)"
                Condition="'@(InternalsVisibleTo)' != ''">
      <Output TaskParameter="Include" ItemName="InternalsVisibleToAttribute" />
    </CreateItem>
    
    <WriteCodeFragment AssemblyAttributes="@(InternalsVisibleToAttribute)"
                       Language="$(Language)"
                       OutputFile="$(GeneratedInternalsVisibleToFile)">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>
  </Target>
</Project>